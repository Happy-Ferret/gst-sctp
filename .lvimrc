let g:neomake_c_enabled_makers = ['clangcheck']
let g:neomake_c_clangcheck_args = ['%:p',
         \ '-p', g:localvimrc_script_dir.'/build',
         \ ]
         " 'extra-arg="-Werror -Wall"',

let g:neomake_enabled_makers = ['install', 'ninja', 'clean', 'meson', 'rm']
let g:neomake_ninja_maker = {
         \ 'exe' : 'ninja',
         \ 'cwd' : g:localvimrc_script_dir.'/build',
         \ 'errorformat' : '%-G%f:%s:,%-G%f:%l: %#error: %#(Each undeclared identifier is reported only%.%#,%-G%f:%l: %#error: %#for each function it appears%.%#,%-GIn file included%.%#,%-G %#from %f:%l\,,%f:%l:%c: %trror: %m,%f:%l:%c: %tarning: %m,%I%f:%l:%c: note: %m,%f:%l:%c: %m,%f:%l: %trror: %m,%f:%l: %tarning: %m,%I%f:%l: note: %m,%f:%l: %m'
         \ }
let g:neomake_install_maker = {
         \ 'exe' : 'ninja',
         \ 'cwd' : g:localvimrc_script_dir.'/build',
         \ 'args' : 'install',
         \ 'errorformat' : '%-G%f:%s:,%-G%f:%l: %#error: %#(Each undeclared identifier is reported only%.%#,%-G%f:%l: %#error: %#for each function it appears%.%#,%-GIn file included%.%#,%-G %#from %f:%l\,,%f:%l:%c: %trror: %m,%f:%l:%c: %tarning: %m,%I%f:%l:%c: note: %m,%f:%l:%c: %m,%f:%l: %trror: %m,%f:%l: %tarning: %m,%I%f:%l: note: %m,%f:%l: %m'
         \ }

let g:neomake_clean_maker = {
         \ 'exe' : 'ninja',
         \ 'cwd' : g:localvimrc_script_dir.'/build',
         \ 'args' : 'clean',
         \ }

let g:neomake_rm_maker = {
         \ 'exe' : 'rm',
         \ 'cwd' : g:localvimrc_script_dir,
         \ 'args' : ['build', '-rvf'],
         \ }
let g:neomake_meson_maker = {
         \ 'exe' : 'meson',
         \ 'cwd' : g:localvimrc_script_dir,
         \ 'args' : ['build', '--werror'],
         \ }


" add compile_commands.json to deoplete-clang completion
let g:deoplete#sources#clang#clang_complete_database = g:localvimrc_script_dir.'/build'

" nnoremap <c-p> :FZF expand('g:localvimrc_script_dir')<CR>

set foldminlines=4
set foldnestmax=3

" make vim not confuse cpp/c
augroup MyProject
   autocmd!
   autocmd BufNewFile,BufRead *.[ch] set filetype=c
   autocmd BufWritePost *.[ch] Neomake! install
   " autocmd User NeomakeFinished call OnNeomakeFinished()
augroup END

function! OnNeomakeFinished()
   echom "install"
   Neomake! install
endfunction

" :cnf   > first error in qf
" :cn    > quickfix next
" :cN    > quickfix prev
" :copen > open quickfix window
" :ccl   > close qf window
