#!/usr/bin/env zsh

PROJECT_DIR=/home/slendl/Projects/gst/gst-sctp
export GST_PLUGIN_PATH=${PROJECT_DIR}/build
LD_LIBRARY_PATH=${PROJECT_DIR}/usrsctp/build

gst_debug_default=""

usage() {
   echo "usage: run [-fbuR] binary"
   exit 1
}

zshexit() {
   [[ ! ${+verbose[1]} ]] && set +x
} 

zparseopts -D -E -- f=fetch b=build u=usrsctp R=norun d:=debug_string v=verbose

[[ $# < 1 ]] && norun[1]=1
(( ${+verbose[1]} )) && set -x

if (( !${+GST_DEBUG} )); then
   # if given by -d > replace, otherwise take default
   export GST_DEBUG=${debug_string[2]:-${gst_debug_default}}
fi

if (( ! ${+norun[1]} )); then
   try_bin=$1
   if [[ -x $try_bin ]]; then
      echo "found $try_bin"
      BIN=$try_bin
   else
      BIN="${PROJECT_DIR}/**/${try_bin}(*[1])"
      # if [[ ! -f ${~BIN} ]]; then
      #    echo "binary ( ${~BIN} ) not found"
      #    usage
      # fi
   fi
fi

# fetch
if (( ${+fetch[1]} )); then
   echo -e "\n####Fetching from git repo...."
   (cd ${PROJECT_DIR}
   git pull origin master
   )
fi 

# build usrsctp
if (( ${+usrsctp[1]} )); then
   echo -e "\n####Building usrsctp...."
   cmake --build ${PROJECT_DIR}/usrsctp/build
fi

# build gst-sctp
if (( ${+build[1]} )); then
   echo -e "\n####Building gst-sctp...."
   (cd ${PROJECT_DIR}/build;
   ninja install
   )
fi

if (( ${+norun[1]} )); then
   exit 0
fi

# run sender
sudo -E LD_LIBRARY_PATH=${LD_LIBRARY_PATH} ${~BIN} 2>&1

